import { app, BrowserWindow, desktopCapturer, ipcMain, screen } from "electron";

// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;
declare const VIDEO_CONTROLS_WEBPACK_ENTRY: string;
declare const VIDEO_CONTROLS_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  // eslint-disable-line global-require
  app.quit();
}

let captureControlsWindow: BrowserWindow;
let mainWindow: BrowserWindow;

const createMainWindow = (): void => {
  // Create the browser window.
  mainWindow = new BrowserWindow({
    height: 720,
    width: 1280,
    webPreferences: {
      nodeIntegration: false, // is default value after Electron v5
      contextIsolation: true, // protect against prototype pollution
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  // mainWindow.webContents.openDevTools();
};

const createCaptureControlsWindow = (): void => {
  captureControlsWindow = new BrowserWindow({
    title: "Capture Controls",
    height: 56,
    width: 300,

    x: screen.getPrimaryDisplay().size.width / 2 - 300 / 2,
    y: screen.getPrimaryDisplay().size.height - 150,

    frame: false,
    resizable: false,
    alwaysOnTop: true,
    show: false,

    webPreferences: {
      contextIsolation: true, // protect against prototype pollution
      preload: VIDEO_CONTROLS_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // and load the index.html of the app.
  captureControlsWindow.loadURL(VIDEO_CONTROLS_WEBPACK_ENTRY);
  captureControlsWindow.setContentProtection(true);

  captureControlsWindow.once("ready-to-show", () =>
    captureControlsWindow.show()
  );
  captureControlsWindow.once("closed", () => {
    captureControlsWindow = null;
  });
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.whenReady().then(createMainWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit();
  }
});

app.on("activate", () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createMainWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.

// Listen for main channel events events
ipcMain.on("main-channel", (event, arg) => {
  if (arg === "record") {
    if (captureControlsWindow == null) createCaptureControlsWindow();
  }
});

ipcMain.handle("main-channel", async (event, arg) => {
  if (arg === "getMedia") {
    const captureScreenSources = await desktopCapturer.getSources({
      types: ["screen"],
      fetchWindowIcons: true,
      thumbnailSize: {
        width: screen.getPrimaryDisplay().size.width,
        height: screen.getPrimaryDisplay().size.height,
      },
    });
    const captureWindowSources = await desktopCapturer.getSources({
      types: ["window"],
      fetchWindowIcons: true,
      thumbnailSize: {
        width: screen.getPrimaryDisplay().size.width,
        height: screen.getPrimaryDisplay().size.height,
      },
    });
    return [
      ...captureWindowSources.map(
        (source): DesktopMediaSource => ({
          id: source.id,
          type: "window",
          display_id: source.display_id,
          name: source.name,
          iconDataURL: source.appIcon?.toDataURL(),
          thumbnailDataURL: source.thumbnail.toDataURL(),
        })
      ),
      ...captureScreenSources.map(
        (source): DesktopMediaSource => ({
          id: source.id,
          type: "screen",
          display_id: source.display_id,
          name: source.name,
          iconDataURL: source.appIcon?.toDataURL(),
          thumbnailDataURL: source.thumbnail.toDataURL(),
        })
      ),
    ];
  }
});

// Listen for capture control eventshttps://stackoverflow.com/questions/42519933/select-a-region-of-desktop-screen-with-electron
ipcMain.on("capture-controls-channel", (event, arg) => {
  switch (arg) {
    case "play":
      console.log(event.sender.getTitle(), "Play");
      break;
    case "pause":
      console.log(event.sender.getTitle(), "Pause");
      break;
    case "stop":
      console.log(event.sender.getTitle(), "Stop");
      break;
    case "close":
      captureControlsWindow.close();
      break;
  }
});
